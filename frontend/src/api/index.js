import axios from 'axios';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –Ω–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è Vite!
const API_BASE_URL = 'http://127.0.0.1:8000'; // TODO: –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –±—ç–∫–µ–Ω–¥–∞, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
  },
  // –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
  validateStatus: status => status >= 200 && status < 300, // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ 2xx –æ—Ç–≤–µ—Ç—ã
});

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
api.interceptors.request.use(
  config => {
    // –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    const logLevel = config.url.includes('csrf-token') || config.url.includes('change-password') 
      ? 'info' // –í–∞–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ª–æ–≥–∏—Ä—É–µ–º —Å —É—Ä–æ–≤–Ω–µ–º info
      : 'debug'; // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å —É—Ä–æ–≤–Ω–µ–º debug

    if (logLevel === 'info') {
      console.info(`üåê REQUEST: ${config.method.toUpperCase()} ${config.url}`);
      console.info('Headers:', config.headers);
      
      // –î–ª—è –º–µ—Ç–æ–¥–æ–≤ —Å —Ç–µ–ª–æ–º –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      if (config.data) {
        try {
          // –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏ –≤ –ª–æ–≥–∞—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
          const safeData = { ...config.data };
          if (safeData.current_password) safeData.current_password = '********';
          if (safeData.new_password) safeData.new_password = '********';
          console.info('Data:', safeData);
        } catch (e) {
          console.info('Data: [Cannot stringify request data]');
        }
      }
    }
    
    return config;
  },
  error => {
    console.error('üõë REQUEST ERROR:', error);
    return Promise.reject(error);
  }
);

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
api.interceptors.response.use(
  response => {
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (response.config.url.includes('csrf-token') || response.config.url.includes('change-password')) {
      console.info(`‚úÖ RESPONSE: ${response.config.method.toUpperCase()} ${response.config.url}`);
      console.info('Status:', response.status);
      console.info('Data:', response.data);
    }
    return response;
  },
  error => {
    console.error(`üõë RESPONSE ERROR: ${error.message}`);
    if (error.response) {
      console.error(`–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: ${error.response.status}`);
      
      // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—à–∏–±–æ–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
      if (error.config.url.includes('change-password')) {
        console.error('–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:');
        console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
        console.error('–ó–∞–≥–æ–ª–æ–≤–∫–∏:', error.response.headers);
        console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏
        if (error.response.data && error.response.data.detail) {
          console.error('–ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏:', error.response.data.detail);
        }
      } else {
        console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
      }
    } else if (error.request) {
      console.error('–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω:', error.request);
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }
    return Promise.reject(error);
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤)
// –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
export const setAuthToken = (token) => {
  if (token) {
    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    console.info('üîë Auth token set in API headers');
  } else {
    delete api.defaults.headers.common['Authorization'];
    console.info('üîë Auth token removed from API headers');
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
export const getCsrfToken = async () => {
  try {
    console.info('üîí Requesting new CSRF token...');
    const response = await api.get('/csrf-token');
    console.info('üîí CSRF token received');
    return response.data.csrf_token;
  } catch (error) {
    console.error('üõë Failed to get CSRF token:', error);
    throw error;
  }
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–∞—á–∞–º–∏
export const doctorsApi = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  getDoctors: async (filters = {}, page = 1, size = 10) => {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const params = { page, size, ...filters };
      const response = await api.get('/api/doctors', { params });
      return response.data;
    } catch (error) {
      console.error('Error fetching doctors:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–∞—á–µ –ø–æ ID
  getDoctorById: async (doctorId) => {
    try {
      const response = await api.get(`/api/doctors/${doctorId}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching doctor with ID ${doctorId}:`, error);
      throw error;
    }
  },
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
  getSpecializations: async () => {
    try {
      const response = await api.get('/api/specializations');
      return response.data;
    } catch (error) {
      console.error('Error fetching specializations:', error);
      throw error;
    }
  }
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞—è–≤–æ–∫
export const notificationsApi = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–æ–ª—å –≤—Ä–∞—á–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  checkDoctorApplicationUpdates: async () => {
    try {
      const response = await api.get('/users/me/doctor-applications');
      return response.data;
    } catch (error) {
      console.error('Error checking doctor application updates:', error);
      throw error;
    }
  },
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
  getUnreadNotifications: async () => {
    try {
      const response = await api.get('/users/me/notifications?unread=true');
      return response.data;
    } catch (error) {
      console.error('Error fetching unread notifications:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
      return [];
    }
  },
  
  // –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
  markNotificationAsRead: async (notificationId) => {
    try {
      const response = await api.put(`/users/me/notifications/${notificationId}/read`);
      return response.data;
    } catch (error) {
      console.error(`Error marking notification ${notificationId} as read:`, error);
      throw error;
    }
  },
  
  // –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ
  markAsViewed: async (applicationId) => {
    try {
      await api.post('/users/me/notifications/viewed', { application_id: applicationId });
      return true; // –£—Å–ø–µ—à–Ω–æ
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ ${applicationId} –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ:`, error);
      return false; // –û—à–∏–±–∫–∞
    }
  },
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getNotificationSettings: async () => {
    try {
      const response = await api.get('/users/me/notification-settings');
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
      return {
        email_notifications: true,
        push_notifications: true,
        appointment_reminders: true
      };
    }
  },
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateNotificationSettings: async (settings) => {
    try {
      const response = await api.put('/users/me/notification-settings', settings);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤ –¢–∞—à–∫–µ–Ω—Ç–∞
api.getDistricts = async () => {
  try {
    const response = await api.get('/api/districts');
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return [
      "–ê–ª–º–∞–∑–∞—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω",
      "–ë–µ–∫—Ç–µ–º–∏—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω",
      "–ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω",
      "–ú–∏—Ä–∑–æ-–£–ª—É–≥–±–µ–∫—Å–∫–∏–π —Ä–∞–π–æ–Ω",
      "–°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π —Ä–∞–π–æ–Ω",
      "–£—á—Ç–µ–ø–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω",
      "–ß–∏–ª–∞–Ω–∑–∞—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω",
      "–®–∞–π—Ö–∞–Ω—Ç–∞—É—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω",
      "–Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω",
      "–Ø–∫–∫–∞—Å–∞—Ä–∞–π—Å–∫–∏–π —Ä–∞–π–æ–Ω",
      "–Ø—à–Ω–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω"
    ];
  }
};

export default api;